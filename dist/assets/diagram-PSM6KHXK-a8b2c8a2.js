var e;import{s as t,g as a,n as l,o as s,b as r,c as n,_ as o,F as i,E as c,ah as d,t as p,D as h,l as m,I as y,k as f,ai as u,N as S,aj as g,ak as x,al as v,j as b}from"./charts-7e225b83.js";import{s as C}from"./chunk-QN33PNHL-d8c440b8.js";import{p as $}from"./chunk-4BX2VUAB-712a8486.js";import{p as w}from"./mermaid-parser.core-8c16c01e.js";import"./vendor-f48b869f.js";import"./_baseUniq-3441c19b.js";import"./_basePickBy-b07d9240.js";import"./clone-6efa5987.js";var L=(o(e=class{constructor(){this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.setAccTitle=t,this.getAccTitle=a,this.setDiagramTitle=l,this.getDiagramTitle=s,this.getAccDescription=r,this.setAccDescription=n}getNodes(){return this.nodes}getConfig(){const e=h,t=i();return c({...e.treemap,...t.treemap??{}})}addNode(e,t){this.nodes.push(e),this.levels.set(e,t),0===t&&(this.outerNodes.push(e),this.root??(this.root=e))}getRoot(){return{name:"",children:this.outerNodes}}addClass(e,t){const a=this.classes.get(e)??{id:e,styles:[],textStyles:[]},l=t.replace(/\\,/g,"§§§").replace(/,/g,";").replace(/§§§/g,",").split(";");l&&l.forEach(e=>{d(e)&&((null==a?void 0:a.textStyles)?a.textStyles.push(e):a.textStyles=[e]),(null==a?void 0:a.styles)?a.styles.push(e):a.styles=[e]}),this.classes.set(e,a)}getClasses(){return this.classes}getStylesForClass(e){var t;return(null==(t=this.classes.get(e))?void 0:t.styles)??[]}clear(){p(),this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.root=void 0}},"TreeMapDB"),e);function k(e){if(!e.length)return[];const t=[],a=[];return e.forEach(e=>{const l={name:e.name,children:"Leaf"===e.type?void 0:[]};for(l.classSelector=null==e?void 0:e.classSelector,(null==e?void 0:e.cssCompiledStyles)&&(l.cssCompiledStyles=[e.cssCompiledStyles]),"Leaf"===e.type&&void 0!==e.value&&(l.value=e.value);a.length>0&&a[a.length-1].level>=e.level;)a.pop();if(0===a.length)t.push(l);else{const e=a[a.length-1].node;e.children?e.children.push(l):e.children=[l]}"Leaf"!==e.type&&a.push({node:l,level:e.level})}),t}o(k,"buildHierarchy");var M=o((e,t)=>{$(e,t);const a=[];for(const r of e.TreemapRows??[])"ClassDefStatement"===r.$type&&t.addClass(r.className??"",r.styleText??"");for(const r of e.TreemapRows??[]){const e=r.item;if(!e)continue;const l=r.indent?parseInt(r.indent):0,s=T(e),n=e.classSelector?t.getStylesForClass(e.classSelector):[],o=n.length>0?n.join(";"):void 0,i={level:l,name:s,type:e.$type,value:e.value,classSelector:e.classSelector,cssCompiledStyles:o};a.push(i)}const l=k(a),s=o((e,a)=>{for(const l of e)t.addNode(l,a),l.children&&l.children.length>0&&s(l.children,a+1)},"addNodesRecursively");s(l,0)},"populate"),T=o(e=>e.name?String(e.name):"","getItemName"),z={parser:{yy:void 0},parse:o(async e=>{var t;try{const a=w,l=await a("treemap",e);m.debug("Treemap AST:",l);const s=null==(t=z.parser)?void 0:t.yy;if(!(s instanceof L))throw new Error("parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.");M(l,s)}catch(a){throw m.error("Error parsing treemap:",a),a}},"parse")},F=10,N={draw:o((e,t,a,l)=>{const s=l.db,r=s.getConfig(),n=r.padding??10,c=s.getDiagramTitle(),d=s.getRoot(),{themeVariables:p}=i();if(!d)return;const h=c?30:0,$=y(t),w=r.nodeWidth?r.nodeWidth*F:960,L=r.nodeHeight?r.nodeHeight*F:500,k=w,M=L+h;let T;$.attr("viewBox",`0 0 ${k} ${M}`),f($,M,k,r.useMaxWidth);try{const e=r.valueFormat||",";if("$0,0"===e)T=o(e=>"$"+u(",")(e),"valueFormat");else if(e.startsWith("$")&&e.includes(",")){const t=/\.\d+/.exec(e),a=t?t[0]:"";T=o(e=>"$"+u(","+a)(e),"valueFormat")}else if(e.startsWith("$")){const t=e.substring(1);T=o(e=>"$"+u(t||"")(e),"valueFormat")}else T=u(e)}catch(H){m.error("Error creating format function:",H),T=u(",")}const z=S().range(["transparent",p.cScale0,p.cScale1,p.cScale2,p.cScale3,p.cScale4,p.cScale5,p.cScale6,p.cScale7,p.cScale8,p.cScale9,p.cScale10,p.cScale11]),N=S().range(["transparent",p.cScalePeer0,p.cScalePeer1,p.cScalePeer2,p.cScalePeer3,p.cScalePeer4,p.cScalePeer5,p.cScalePeer6,p.cScalePeer7,p.cScalePeer8,p.cScalePeer9,p.cScalePeer10,p.cScalePeer11]),P=S().range([p.cScaleLabel0,p.cScaleLabel1,p.cScaleLabel2,p.cScaleLabel3,p.cScaleLabel4,p.cScaleLabel5,p.cScaleLabel6,p.cScaleLabel7,p.cScaleLabel8,p.cScaleLabel9,p.cScaleLabel10,p.cScaleLabel11]);c&&$.append("text").attr("x",k/2).attr("y",h/2).attr("class","treemapTitle").attr("text-anchor","middle").attr("dominant-baseline","middle").text(c);const j=$.append("g").attr("transform",`translate(0, ${h})`).attr("class","treemapContainer"),W=g(d).sum(e=>e.value??0).sort((e,t)=>(t.value??0)-(e.value??0)),A=x().size([w,L]).paddingTop(e=>e.children&&e.children.length>0?35:0).paddingInner(n).paddingLeft(e=>e.children&&e.children.length>0?F:0).paddingRight(e=>e.children&&e.children.length>0?F:0).paddingBottom(e=>e.children&&e.children.length>0?F:0).round(!0)(W),D=A.descendants().filter(e=>e.children&&e.children.length>0),B=j.selectAll(".treemapSection").data(D).enter().append("g").attr("class","treemapSection").attr("transform",e=>`translate(${e.x0},${e.y0})`);B.append("rect").attr("width",e=>e.x1-e.x0).attr("height",25).attr("class","treemapSectionHeader").attr("fill","none").attr("fill-opacity",.6).attr("stroke-width",.6).attr("style",e=>0===e.depth?"display: none;":""),B.append("clipPath").attr("id",(e,a)=>`clip-section-${t}-${a}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-12)).attr("height",25),B.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class",(e,t)=>`treemapSection section${t}`).attr("fill",e=>z(e.data.name)).attr("fill-opacity",.6).attr("stroke",e=>N(e.data.name)).attr("stroke-width",2).attr("stroke-opacity",.4).attr("style",e=>{if(0===e.depth)return"display: none;";const t=v({cssCompiledStyles:e.data.cssCompiledStyles});return t.nodeStyles+";"+t.borderStyles.join(";")}),B.append("text").attr("class","treemapSectionLabel").attr("x",6).attr("y",12.5).attr("dominant-baseline","middle").text(e=>0===e.depth?"":e.data.name).attr("font-weight","bold").attr("style",e=>{if(0===e.depth)return"display: none;";return"dominant-baseline: middle; font-size: 12px; fill:"+P(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"+v({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")}).each(function(e){if(0===e.depth)return;const t=b(this),a=e.data.name;t.text(a);const l=e.x1-e.x0;let s;if(!1!==r.showValues&&e.value){s=l-10-30-10-6}else{s=l-6-6}const n=Math.max(15,s),o=t.node();if(o.getComputedTextLength()>n){const e="...";let l=a;for(;l.length>0;){if(l=a.substring(0,l.length-1),0===l.length){t.text(e),o.getComputedTextLength()>n&&t.text("");break}if(t.text(l+e),o.getComputedTextLength()<=n)break}}}),!1!==r.showValues&&B.append("text").attr("class","treemapSectionValue").attr("x",e=>e.x1-e.x0-10).attr("y",12.5).attr("text-anchor","end").attr("dominant-baseline","middle").text(e=>e.value?T(e.value):"").attr("font-style","italic").attr("style",e=>{if(0===e.depth)return"display: none;";return"text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:"+P(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"+v({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")});const V=A.leaves(),E=j.selectAll(".treemapLeafGroup").data(V).enter().append("g").attr("class",(e,t)=>`treemapNode treemapLeafGroup leaf${t}${e.data.classSelector?` ${e.data.classSelector}`:""}x`).attr("transform",e=>`translate(${e.x0},${e.y0})`);E.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class","treemapLeaf").attr("fill",e=>e.parent?z(e.parent.data.name):z(e.data.name)).attr("style",e=>v({cssCompiledStyles:e.data.cssCompiledStyles}).nodeStyles).attr("fill-opacity",.3).attr("stroke",e=>e.parent?z(e.parent.data.name):z(e.data.name)).attr("stroke-width",3),E.append("clipPath").attr("id",(e,a)=>`clip-${t}-${a}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-4)).attr("height",e=>Math.max(0,e.y1-e.y0-4));if(E.append("text").attr("class","treemapLabel").attr("x",e=>(e.x1-e.x0)/2).attr("y",e=>(e.y1-e.y0)/2).attr("style",e=>"text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:"+P(e.data.name)+";"+v({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).attr("clip-path",(e,a)=>`url(#clip-${t}-${a})`).text(e=>e.data.name).each(function(e){const t=b(this),a=e.x1-e.x0,l=e.y1-e.y0,s=t.node(),r=a-8,n=l-8;if(r<10||n<10)return void t.style("display","none");let o=parseInt(t.style("font-size"),10);for(;s.getComputedTextLength()>r&&o>8;)o--,t.style("font-size",`${o}px`);let i=Math.max(6,Math.min(28,Math.round(.6*o))),c=o+2+i;for(;c>n&&o>8&&(o--,i=Math.max(6,Math.min(28,Math.round(.6*o))),!(i<6&&8===o));)t.style("font-size",`${o}px`),c=o+2+i;t.style("font-size",`${o}px`),(s.getComputedTextLength()>r||o<8||n<o)&&t.style("display","none")}),!1!==r.showValues){E.append("text").attr("class","treemapValue").attr("x",e=>(e.x1-e.x0)/2).attr("y",function(e){return(e.y1-e.y0)/2}).attr("style",e=>"text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:"+P(e.data.name)+";"+v({cssCompiledStyles:e.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).attr("clip-path",(e,a)=>`url(#clip-${t}-${a})`).text(e=>e.value?T(e.value):"").each(function(e){const t=b(this),a=this.parentNode;if(!a)return void t.style("display","none");const l=b(a).select(".treemapLabel");if(l.empty()||"none"===l.style("display"))return void t.style("display","none");const s=parseFloat(l.style("font-size")),r=Math.max(6,Math.min(28,Math.round(.6*s)));t.style("font-size",`${r}px`);const n=(e.y1-e.y0)/2+s/2+2;t.attr("y",n);const o=e.x1-e.x0,i=e.y1-e.y0-4,c=o-8;t.node().getComputedTextLength()>c||n+r>i||r<6?t.style("display","none"):t.style("display",null)})}const R=r.diagramPadding??8;C($,R,"flowchart",(null==r?void 0:r.useMaxWidth)||!1)},"draw"),getClasses:o(function(e,t){return t.db.getClasses()},"getClasses")},P={sectionStrokeColor:"black",sectionStrokeWidth:"1",sectionFillColor:"#efefef",leafStrokeColor:"black",leafStrokeWidth:"1",leafFillColor:"#efefef",labelColor:"black",labelFontSize:"12px",valueFontSize:"10px",valueColor:"black",titleColor:"black",titleFontSize:"14px"},j=o(({treemap:e}={})=>{const t=c(P,e);return`\n  .treemapNode.section {\n    stroke: ${t.sectionStrokeColor};\n    stroke-width: ${t.sectionStrokeWidth};\n    fill: ${t.sectionFillColor};\n  }\n  .treemapNode.leaf {\n    stroke: ${t.leafStrokeColor};\n    stroke-width: ${t.leafStrokeWidth};\n    fill: ${t.leafFillColor};\n  }\n  .treemapLabel {\n    fill: ${t.labelColor};\n    font-size: ${t.labelFontSize};\n  }\n  .treemapValue {\n    fill: ${t.valueColor};\n    font-size: ${t.valueFontSize};\n  }\n  .treemapTitle {\n    fill: ${t.titleColor};\n    font-size: ${t.titleFontSize};\n  }\n  `},"getStyles"),W={parser:z,get db(){return new L},renderer:N,styles:j};export{W as diagram};
