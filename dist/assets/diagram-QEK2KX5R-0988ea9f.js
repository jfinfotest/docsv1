import{D as t,_ as e,s as a,g as r,n,o as s,b as i,c as o,l,E as c,F as d,t as p,I as g,P as u}from"./charts-7e225b83.js";import{p as h}from"./chunk-4BX2VUAB-712a8486.js";import{p as x}from"./mermaid-parser.core-8c16c01e.js";import"./vendor-f48b869f.js";import"./_baseUniq-3441c19b.js";import"./_basePickBy-b07d9240.js";import"./clone-6efa5987.js";var m={showLegend:!0,ticks:5,max:null,min:0,graticule:"circle"},$={axes:[],curves:[],options:m},f=structuredClone($),v=t.radar,y=e(()=>c({...v,...d().radar}),"getConfig"),b=e(()=>f.axes,"getAxes"),w=e(()=>f.curves,"getCurves"),M=e(()=>f.options,"getOptions"),C=e(t=>{f.axes=t.map(t=>({name:t.name,label:t.label??t.name}))},"setAxes"),L=e(t=>{f.curves=t.map(t=>({name:t.name,label:t.label??t.name,entries:A(t.entries)}))},"setCurves"),A=e(t=>{if(null==t[0].axis)return t.map(t=>t.value);const e=b();if(0===e.length)throw new Error("Axes must be populated before curves for reference entries");return e.map(e=>{const a=t.find(t=>{var a;return(null==(a=t.axis)?void 0:a.$refText)===e.name});if(void 0===a)throw new Error("Missing entry for axis "+e.label);return a.value})},"computeCurveEntries"),k={getAxes:b,getCurves:w,getOptions:M,setAxes:C,setCurves:L,setOptions:e(t=>{var e,a,r,n,s;const i=t.reduce((t,e)=>(t[e.name]=e,t),{});f.options={showLegend:(null==(e=i.showLegend)?void 0:e.value)??m.showLegend,ticks:(null==(a=i.ticks)?void 0:a.value)??m.ticks,max:(null==(r=i.max)?void 0:r.value)??m.max,min:(null==(n=i.min)?void 0:n.value)??m.min,graticule:(null==(s=i.graticule)?void 0:s.value)??m.graticule}},"setOptions"),getConfig:y,clear:e(()=>{p(),f=structuredClone($)},"clear"),setAccTitle:a,getAccTitle:r,setDiagramTitle:n,getDiagramTitle:s,getAccDescription:i,setAccDescription:o},T=e(t=>{h(t,k);const{axes:e,curves:a,options:r}=t;k.setAxes(e),k.setCurves(a),k.setOptions(r)},"populate"),O={parse:e(async t=>{const e=await x("radar",t);l.debug(e),T(e)},"parse")},S=e((t,e,a,r)=>{const n=r.db,s=n.getAxes(),i=n.getCurves(),o=n.getOptions(),l=n.getConfig(),c=n.getDiagramTitle(),d=g(e),p=I(d,l),u=o.max??Math.max(...i.map(t=>Math.max(...t.entries))),h=o.min,x=Math.min(l.width,l.height)/2;j(p,s,x,o.ticks,o.graticule),E(p,s,x,l),F(p,s,i,h,u,o.graticule,l),B(p,i,o.showLegend,l),p.append("text").attr("class","radarTitle").text(c).attr("x",0).attr("y",-l.height/2-l.marginTop)},"draw"),I=e((t,e)=>{const a=e.width+e.marginLeft+e.marginRight,r=e.height+e.marginTop+e.marginBottom,n=e.marginLeft+e.width/2,s=e.marginTop+e.height/2;return t.attr("viewbox",`0 0 ${a} ${r}`).attr("width",a).attr("height",r),t.append("g").attr("transform",`translate(${n}, ${s})`)},"drawFrame"),j=e((t,e,a,r,n)=>{if("circle"===n)for(let s=0;s<r;s++){const e=a*(s+1)/r;t.append("circle").attr("r",e).attr("class","radarGraticule")}else if("polygon"===n){const n=e.length;for(let s=0;s<r;s++){const i=a*(s+1)/r,o=e.map((t,e)=>{const a=2*e*Math.PI/n-Math.PI/2;return`${i*Math.cos(a)},${i*Math.sin(a)}`}).join(" ");t.append("polygon").attr("points",o).attr("class","radarGraticule")}}},"drawGraticule"),E=e((t,e,a,r)=>{const n=e.length;for(let s=0;s<n;s++){const i=e[s].label,o=2*s*Math.PI/n-Math.PI/2;t.append("line").attr("x1",0).attr("y1",0).attr("x2",a*r.axisScaleFactor*Math.cos(o)).attr("y2",a*r.axisScaleFactor*Math.sin(o)).attr("class","radarAxisLine"),t.append("text").text(i).attr("x",a*r.axisLabelFactor*Math.cos(o)).attr("y",a*r.axisLabelFactor*Math.sin(o)).attr("class","radarAxisLabel")}},"drawAxes");function F(t,e,a,r,n,s,i){const o=e.length,l=Math.min(i.width,i.height)/2;a.forEach((e,a)=>{if(e.entries.length!==o)return;const c=e.entries.map((t,e)=>{const a=2*Math.PI*e/o-Math.PI/2,s=P(t,r,n,l);return{x:s*Math.cos(a),y:s*Math.sin(a)}});"circle"===s?t.append("path").attr("d",z(c,i.curveTension)).attr("class",`radarCurve-${a}`):"polygon"===s&&t.append("polygon").attr("points",c.map(t=>`${t.x},${t.y}`).join(" ")).attr("class",`radarCurve-${a}`)})}function P(t,e,a,r){return r*(Math.min(Math.max(t,e),a)-e)/(a-e)}function z(t,e){const a=t.length;let r=`M${t[0].x},${t[0].y}`;for(let n=0;n<a;n++){const s=t[(n-1+a)%a],i=t[n],o=t[(n+1)%a],l=t[(n+2)%a],c={x:i.x+(o.x-s.x)*e,y:i.y+(o.y-s.y)*e},d={x:o.x-(l.x-i.x)*e,y:o.y-(l.y-i.y)*e};r+=` C${c.x},${c.y} ${d.x},${d.y} ${o.x},${o.y}`}return`${r} Z`}function B(t,e,a,r){if(!a)return;const n=3*(r.width/2+r.marginRight)/4,s=3*-(r.height/2+r.marginTop)/4;e.forEach((e,a)=>{const r=t.append("g").attr("transform",`translate(${n}, ${s+20*a})`);r.append("rect").attr("width",12).attr("height",12).attr("class",`radarLegendBox-${a}`),r.append("text").attr("x",16).attr("y",0).attr("class","radarLegendText").text(e.label)})}e(F,"drawCurves"),e(P,"relativeRadius"),e(z,"closedRoundCurve"),e(B,"drawLegend");var D={draw:S},R=e((t,e)=>{let a="";for(let r=0;r<t.THEME_COLOR_LIMIT;r++){const n=t[`cScale${r}`];a+=`\n\t\t.radarCurve-${r} {\n\t\t\tcolor: ${n};\n\t\t\tfill: ${n};\n\t\t\tfill-opacity: ${e.curveOpacity};\n\t\t\tstroke: ${n};\n\t\t\tstroke-width: ${e.curveStrokeWidth};\n\t\t}\n\t\t.radarLegendBox-${r} {\n\t\t\tfill: ${n};\n\t\t\tfill-opacity: ${e.curveOpacity};\n\t\t\tstroke: ${n};\n\t\t}\n\t\t`}return a},"genIndexStyles"),_=e(t=>{const e=u(),a=d(),r=c(e,a.themeVariables);return{themeVariables:r,radarOptions:c(r.radar,t)}},"buildRadarStyleOptions"),G={parser:O,db:k,renderer:D,styles:e(({radar:t}={})=>{const{themeVariables:e,radarOptions:a}=_(t);return`\n\t.radarTitle {\n\t\tfont-size: ${e.fontSize};\n\t\tcolor: ${e.titleColor};\n\t\tdominant-baseline: hanging;\n\t\ttext-anchor: middle;\n\t}\n\t.radarAxisLine {\n\t\tstroke: ${a.axisColor};\n\t\tstroke-width: ${a.axisStrokeWidth};\n\t}\n\t.radarAxisLabel {\n\t\tdominant-baseline: middle;\n\t\ttext-anchor: middle;\n\t\tfont-size: ${a.axisLabelFontSize}px;\n\t\tcolor: ${a.axisColor};\n\t}\n\t.radarGraticule {\n\t\tfill: ${a.graticuleColor};\n\t\tfill-opacity: ${a.graticuleOpacity};\n\t\tstroke: ${a.graticuleColor};\n\t\tstroke-width: ${a.graticuleStrokeWidth};\n\t}\n\t.radarLegendText {\n\t\ttext-anchor: start;\n\t\tfont-size: ${a.legendFontSize}px;\n\t\tdominant-baseline: hanging;\n\t}\n\t${R(e,a)}\n\t`},"styles")};export{G as diagram};
